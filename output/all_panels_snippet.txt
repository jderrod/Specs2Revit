# Revit Python Shell Snippet to Create All Bathroom Stall Panels
# Generated by Cascade AI
# Copy and paste the entire content of this file into the Revit Python Shell.

import clr
clr.AddReference('RevitAPI')
from Autodesk.Revit.DB import *
from Autodesk.Revit.DB import ElementTransformUtils
import math

doc = __revit__.ActiveUIDocument.Document

# Start a single transaction for all panels
t = Transaction(doc, 'Create Bathroom Stall Panels')
t.Start()

try:
    # --- Create Reference Floor and Wall ---
    # Create a reference floor plane (20ft x 20ft, 6in thick)
    floor_profile = [
        Line.CreateBound(XYZ(0, 0, 0), XYZ(20, 0, 0)),
        Line.CreateBound(XYZ(20, 0, 0), XYZ(20, 20, 0)),
        Line.CreateBound(XYZ(20, 20, 0), XYZ(0, 20, 0)),
        Line.CreateBound(XYZ(0, 20, 0), XYZ(0, 0, 0))
    ]
    floor_loop = CurveLoop.Create(floor_profile)
    # Extrude in the negative Z direction with a positive distance
    floor_solid = GeometryCreationUtilities.CreateExtrusionGeometry([floor_loop], XYZ.BasisZ.Negate(), 0.5)
    floor_shape = DirectShape.CreateElement(doc, ElementId(BuiltInCategory.OST_Floors))
    floor_shape.SetShape([floor_solid])
    floor_shape.Name = 'Reference Floor'

    # Create a reference back wall (20ft long, 8ft high, 6in thick)
    wall_profile = [
        Line.CreateBound(XYZ(0, 0, 0), XYZ(20, 0, 0)),
        Line.CreateBound(XYZ(20, 0, 0), XYZ(20, 0, 8)),
        Line.CreateBound(XYZ(20, 0, 8), XYZ(0, 0, 8)),
        Line.CreateBound(XYZ(0, 0, 8), XYZ(0, 0, 0))
    ]
    wall_loop = CurveLoop.Create(wall_profile)
    wall_solid = GeometryCreationUtilities.CreateExtrusionGeometry([wall_loop], XYZ.BasisY, 0.5)
    wall_shape = DirectShape.CreateElement(doc, ElementId(BuiltInCategory.OST_Walls))
    wall_shape.SetShape([wall_solid])
    wall_shape.Name = 'Reference Wall'
    print('Created reference floor and wall.')


    # --- Side Wall Panel 1: Sample Side Panel Type ---
    stall_depth = 4.166666666666667
    panel_height = 4.333333333333333
    panel_thickness = 0.0833
    panel_offset_x = 0
    vertical_offset = 0.5

    # Define profile in YZ plane, offset from the back wall and vertically
    p1 = XYZ(panel_offset_x, 0.5, vertical_offset)
    p2 = XYZ(panel_offset_x, stall_depth + 0.5, vertical_offset)
    p3 = XYZ(panel_offset_x, stall_depth + 0.5, vertical_offset + panel_height)
    p4 = XYZ(panel_offset_x, 0.5, vertical_offset + panel_height)
    
    panel_lines = [Line.CreateBound(p1, p2), Line.CreateBound(p2, p3), Line.CreateBound(p3, p4), Line.CreateBound(p4, p1)]
    outer_loop = CurveLoop.Create(panel_lines)
    
    # First wall extrudes left, second wall extrudes right, creating the inner stall space
    extrusion_dir = XYZ.BasisX.Negate() if True else XYZ.BasisX
    panel_solid = GeometryCreationUtilities.CreateExtrusionGeometry([outer_loop], extrusion_dir, panel_thickness)
    
    shape_element = DirectShape.CreateElement(doc, ElementId(BuiltInCategory.OST_GenericModel))
    shape_element.SetShape([panel_solid])
    shape_element.Name = 'Panel 1 - Sample Side Panel Type'
    print('Successfully created Side Wall Panel 1.')

    # --- Front Panel 2: Sample Door Type ---
    panel_width = 2.5
    panel_height = 4.333333333333333
    panel_thickness = 0.0833
    panel_offset_x = 0.2916666666666667
    stall_depth = 4.666666666666667
    floor_clearance = 0.5

    # 1. Define panel profile flat on the floor (XY plane at Z=0)
    p1 = XYZ(panel_offset_x, stall_depth, 0)
    p2 = XYZ(panel_offset_x + panel_width, stall_depth, 0)
    p3 = XYZ(panel_offset_x + panel_width, stall_depth + panel_height, 0)
    p4 = XYZ(panel_offset_x, stall_depth + panel_height, 0)
    
    panel_lines = [Line.CreateBound(p1, p2), Line.CreateBound(p2, p3), Line.CreateBound(p3, p4), Line.CreateBound(p4, p1)]
    outer_loop = CurveLoop.Create(panel_lines)
    
    # 2. Create base solid by extruding up along Z-axis
    panel_solid = GeometryCreationUtilities.CreateExtrusionGeometry([outer_loop], XYZ.BasisZ, panel_thickness)
    final_solid = panel_solid

    # 3. Create holes if needed
    if True:
        bottom_hole_dist = 0.3333333333333333
        hole_dist_from_side = 0.25
        hole_radius = 0.0208

        hole_centers = [
            XYZ(panel_offset_x + hole_dist_from_side, stall_depth + bottom_hole_dist, 0),
            XYZ(panel_offset_x + panel_width - hole_dist_from_side, stall_depth + bottom_hole_dist, 0)
        ]
        
        for center in hole_centers:
            plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, center)
            arc1 = Arc.Create(plane, hole_radius, 0, math.pi)
            arc2 = Arc.Create(plane, hole_radius, math.pi, 2 * math.pi)
            hole_loop = CurveLoop.Create([arc1, arc2])
            cylinder_solid = GeometryCreationUtilities.CreateExtrusionGeometry([hole_loop], XYZ.BasisZ, panel_thickness + 0.1)
            
            if final_solid and cylinder_solid:
                final_solid = BooleanOperationsUtils.ExecuteBooleanOperation(final_solid, cylinder_solid, BooleanOperationsType.Difference)

    # 4. Create the DirectShape element
    shape_element = DirectShape.CreateElement(doc, ElementId(BuiltInCategory.OST_GenericModel))
    shape_element.SetShape([final_solid])
    shape_element.Name = 'Panel 2 - Sample Door Type'
    print('Created flat panel 2.')

    # 5. Rotate the panel 90 degrees up around its front edge
    rotation_axis = Line.CreateBound(p1, p2)
    ElementTransformUtils.RotateElement(doc, shape_element.Id, rotation_axis, math.pi / 2)
    print('Rotated front panel 2 up.')

    # 6. Move the panel to its final height
    translation = XYZ(0, 0, floor_clearance)
    ElementTransformUtils.MoveElement(doc, shape_element.Id, translation)
    print('Moved front panel 2 to final height.')

    # --- Side Wall Panel 3: Sample Side Panel Type ---
    stall_depth = 4.166666666666667
    panel_height = 4.333333333333333
    panel_thickness = 0.0833
    panel_offset_x = 3.083333333333333
    vertical_offset = 0.5

    # Define profile in YZ plane, offset from the back wall and vertically
    p1 = XYZ(panel_offset_x, 0.5, vertical_offset)
    p2 = XYZ(panel_offset_x, stall_depth + 0.5, vertical_offset)
    p3 = XYZ(panel_offset_x, stall_depth + 0.5, vertical_offset + panel_height)
    p4 = XYZ(panel_offset_x, 0.5, vertical_offset + panel_height)
    
    panel_lines = [Line.CreateBound(p1, p2), Line.CreateBound(p2, p3), Line.CreateBound(p3, p4), Line.CreateBound(p4, p1)]
    outer_loop = CurveLoop.Create(panel_lines)
    
    # First wall extrudes left, second wall extrudes right, creating the inner stall space
    extrusion_dir = XYZ.BasisX.Negate() if False else XYZ.BasisX
    panel_solid = GeometryCreationUtilities.CreateExtrusionGeometry([outer_loop], extrusion_dir, panel_thickness)
    
    shape_element = DirectShape.CreateElement(doc, ElementId(BuiltInCategory.OST_GenericModel))
    shape_element.SetShape([panel_solid])
    shape_element.Name = 'Panel 3 - Sample Side Panel Type'
    print('Successfully created Side Wall Panel 3.')

    # --- Front Panel 4: Sample Pilaster Type ---
    panel_width = 0.5833333333333334
    panel_height = 6.0
    panel_thickness = 0.0833
    panel_offset_x = -0.0833
    stall_depth = 4.749966666666667
    floor_clearance = 0

    # 1. Define panel profile flat on the floor (XY plane at Z=0)
    p1 = XYZ(panel_offset_x, stall_depth, 0)
    p2 = XYZ(panel_offset_x + panel_width, stall_depth, 0)
    p3 = XYZ(panel_offset_x + panel_width, stall_depth + panel_height, 0)
    p4 = XYZ(panel_offset_x, stall_depth + panel_height, 0)
    
    panel_lines = [Line.CreateBound(p1, p2), Line.CreateBound(p2, p3), Line.CreateBound(p3, p4), Line.CreateBound(p4, p1)]
    outer_loop = CurveLoop.Create(panel_lines)
    
    # 2. Create base solid by extruding up along Z-axis
    panel_solid = GeometryCreationUtilities.CreateExtrusionGeometry([outer_loop], XYZ.BasisZ, panel_thickness)
    final_solid = panel_solid

    # 3. Create holes if needed
    if False:
        bottom_hole_dist = 0
        hole_dist_from_side = 0
        hole_radius = 0

        hole_centers = [
            XYZ(panel_offset_x + hole_dist_from_side, stall_depth + bottom_hole_dist, 0),
            XYZ(panel_offset_x + panel_width - hole_dist_from_side, stall_depth + bottom_hole_dist, 0)
        ]
        
        for center in hole_centers:
            plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, center)
            arc1 = Arc.Create(plane, hole_radius, 0, math.pi)
            arc2 = Arc.Create(plane, hole_radius, math.pi, 2 * math.pi)
            hole_loop = CurveLoop.Create([arc1, arc2])
            cylinder_solid = GeometryCreationUtilities.CreateExtrusionGeometry([hole_loop], XYZ.BasisZ, panel_thickness + 0.1)
            
            if final_solid and cylinder_solid:
                final_solid = BooleanOperationsUtils.ExecuteBooleanOperation(final_solid, cylinder_solid, BooleanOperationsType.Difference)

    # 4. Create the DirectShape element
    shape_element = DirectShape.CreateElement(doc, ElementId(BuiltInCategory.OST_GenericModel))
    shape_element.SetShape([final_solid])
    shape_element.Name = 'Panel 4 - Sample Pilaster Type'
    print('Created flat panel 4.')

    # 5. Rotate the panel 90 degrees up around its front edge
    rotation_axis = Line.CreateBound(p1, p2)
    ElementTransformUtils.RotateElement(doc, shape_element.Id, rotation_axis, math.pi / 2)
    print('Rotated front panel 4 up.')

    # 6. Move the panel to its final height
    translation = XYZ(0, 0, floor_clearance)
    ElementTransformUtils.MoveElement(doc, shape_element.Id, translation)
    print('Moved front panel 4 to final height.')

    # --- Front Panel 5: Sample Pilaster Type ---
    panel_width = 0.5833333333333334
    panel_height = 6.0
    panel_thickness = 0.0833
    panel_offset_x = 2.5832999999999995
    stall_depth = 4.749966666666667
    floor_clearance = 0

    # 1. Define panel profile flat on the floor (XY plane at Z=0)
    p1 = XYZ(panel_offset_x, stall_depth, 0)
    p2 = XYZ(panel_offset_x + panel_width, stall_depth, 0)
    p3 = XYZ(panel_offset_x + panel_width, stall_depth + panel_height, 0)
    p4 = XYZ(panel_offset_x, stall_depth + panel_height, 0)
    
    panel_lines = [Line.CreateBound(p1, p2), Line.CreateBound(p2, p3), Line.CreateBound(p3, p4), Line.CreateBound(p4, p1)]
    outer_loop = CurveLoop.Create(panel_lines)
    
    # 2. Create base solid by extruding up along Z-axis
    panel_solid = GeometryCreationUtilities.CreateExtrusionGeometry([outer_loop], XYZ.BasisZ, panel_thickness)
    final_solid = panel_solid

    # 3. Create holes if needed
    if False:
        bottom_hole_dist = 0
        hole_dist_from_side = 0
        hole_radius = 0

        hole_centers = [
            XYZ(panel_offset_x + hole_dist_from_side, stall_depth + bottom_hole_dist, 0),
            XYZ(panel_offset_x + panel_width - hole_dist_from_side, stall_depth + bottom_hole_dist, 0)
        ]
        
        for center in hole_centers:
            plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, center)
            arc1 = Arc.Create(plane, hole_radius, 0, math.pi)
            arc2 = Arc.Create(plane, hole_radius, math.pi, 2 * math.pi)
            hole_loop = CurveLoop.Create([arc1, arc2])
            cylinder_solid = GeometryCreationUtilities.CreateExtrusionGeometry([hole_loop], XYZ.BasisZ, panel_thickness + 0.1)
            
            if final_solid and cylinder_solid:
                final_solid = BooleanOperationsUtils.ExecuteBooleanOperation(final_solid, cylinder_solid, BooleanOperationsType.Difference)

    # 4. Create the DirectShape element
    shape_element = DirectShape.CreateElement(doc, ElementId(BuiltInCategory.OST_GenericModel))
    shape_element.SetShape([final_solid])
    shape_element.Name = 'Panel 5 - Sample Pilaster Type'
    print('Created flat panel 5.')

    # 5. Rotate the panel 90 degrees up around its front edge
    rotation_axis = Line.CreateBound(p1, p2)
    ElementTransformUtils.RotateElement(doc, shape_element.Id, rotation_axis, math.pi / 2)
    print('Rotated front panel 5 up.')

    # 6. Move the panel to its final height
    translation = XYZ(0, 0, floor_clearance)
    ElementTransformUtils.MoveElement(doc, shape_element.Id, translation)
    print('Moved front panel 5 to final height.')
except Exception as e:
    print(f"An error occurred during panel creation: {e}")
    t.RollBack()
else:
    t.Commit()
    print("Successfully created all panels.")
