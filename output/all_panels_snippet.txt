
# Revit Python Shell Snippet to Create All Bathroom Stall Panels
# Generated by Cascade AI
# Copy and paste the entire content of this file into the Revit Python Shell.

import clr
clr.AddReference('RevitAPI')
from Autodesk.Revit.DB import *
import math

doc = __revit__.ActiveUIDocument.Document

# Start a single transaction for all panels
t = Transaction(doc, 'Create Bathroom Stall Panels')
t.Start()

try:

    # --- Panel 1: Sample Door Type ---
    panel_width = 4.333333333333333
    panel_height = 2.5
    panel_thickness = 0.0833
    panel_offset_x = 0

    # Define the panel profile in the XZ-plane to make it vertical
    p1 = XYZ(panel_offset_x, 0, 0)
    p2 = XYZ(panel_offset_x + panel_width, 0, 0)
    p3 = XYZ(panel_offset_x + panel_width, 0, panel_height)
    p4 = XYZ(panel_offset_x, 0, panel_height)
    
    panel_lines = [Line.CreateBound(p1, p2), Line.CreateBound(p2, p3), Line.CreateBound(p3, p4), Line.CreateBound(p4, p1)]
    outer_loop = CurveLoop.Create(panel_lines)
    
    # Extrude along the Y-axis to create a vertical panel
    panel_solid = GeometryCreationUtilities.CreateExtrusionGeometry([outer_loop], XYZ.BasisY, panel_thickness)
    final_solid = panel_solid

    if True:
        bottom_hole_dist = 0.3333333333333333
        hole_dist_from_floor = 0.0833
        hole_radius = 0.0208

        # Hole centers are on the XZ plane (Y=0), with Z value determining height from floor
        hole_centers = [
            XYZ(panel_offset_x + bottom_hole_dist, 0, hole_dist_from_floor),
            XYZ(panel_offset_x + panel_width - bottom_hole_dist, 0, hole_dist_from_floor)
        ]
        
        for center in hole_centers:
            # The plane for the holes is perpendicular to the Y-axis
            plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, center)
            arc1 = Arc.Create(plane, hole_radius, 0, math.pi)
            arc2 = Arc.Create(plane, hole_radius, math.pi, 2 * math.pi)
            hole_loop = CurveLoop.Create([arc1, arc2])
            # Extrude the hole cylinder along the Y-axis
            cylinder_solid = GeometryCreationUtilities.CreateExtrusionGeometry([hole_loop], XYZ.BasisY, panel_thickness + 0.1)
            
            if final_solid and cylinder_solid:
                final_solid = BooleanOperationsUtils.ExecuteBooleanOperation(final_solid, cylinder_solid, BooleanOperationsType.Difference)

    shape_element = DirectShape.CreateElement(doc, ElementId(BuiltInCategory.OST_GenericModel))
    shape_element.SetShape([final_solid])
    shape_element.Name = 'Panel 1 - Sample Door Type'
    print('Successfully created Panel 1 - Sample Door Type.')

    # --- Panel 2: Sample Pilaster Type ---
    panel_width = 6.0
    panel_height = 0.5833333333333334
    panel_thickness = 0.0833
    panel_offset_x = 5.333333333333333

    # Define the panel profile in the XZ-plane to make it vertical
    p1 = XYZ(panel_offset_x, 0, 0)
    p2 = XYZ(panel_offset_x + panel_width, 0, 0)
    p3 = XYZ(panel_offset_x + panel_width, 0, panel_height)
    p4 = XYZ(panel_offset_x, 0, panel_height)
    
    panel_lines = [Line.CreateBound(p1, p2), Line.CreateBound(p2, p3), Line.CreateBound(p3, p4), Line.CreateBound(p4, p1)]
    outer_loop = CurveLoop.Create(panel_lines)
    
    # Extrude along the Y-axis to create a vertical panel
    panel_solid = GeometryCreationUtilities.CreateExtrusionGeometry([outer_loop], XYZ.BasisY, panel_thickness)
    final_solid = panel_solid

    if False:
        bottom_hole_dist = 0.0
        hole_dist_from_floor = 0.0833
        hole_radius = 0.0208

        # Hole centers are on the XZ plane (Y=0), with Z value determining height from floor
        hole_centers = [
            XYZ(panel_offset_x + bottom_hole_dist, 0, hole_dist_from_floor),
            XYZ(panel_offset_x + panel_width - bottom_hole_dist, 0, hole_dist_from_floor)
        ]
        
        for center in hole_centers:
            # The plane for the holes is perpendicular to the Y-axis
            plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, center)
            arc1 = Arc.Create(plane, hole_radius, 0, math.pi)
            arc2 = Arc.Create(plane, hole_radius, math.pi, 2 * math.pi)
            hole_loop = CurveLoop.Create([arc1, arc2])
            # Extrude the hole cylinder along the Y-axis
            cylinder_solid = GeometryCreationUtilities.CreateExtrusionGeometry([hole_loop], XYZ.BasisY, panel_thickness + 0.1)
            
            if final_solid and cylinder_solid:
                final_solid = BooleanOperationsUtils.ExecuteBooleanOperation(final_solid, cylinder_solid, BooleanOperationsType.Difference)

    shape_element = DirectShape.CreateElement(doc, ElementId(BuiltInCategory.OST_GenericModel))
    shape_element.SetShape([final_solid])
    shape_element.Name = 'Panel 2 - Sample Pilaster Type'
    print('Successfully created Panel 2 - Sample Pilaster Type.')

    # --- Panel 3: Sample Pilaster Type ---
    panel_width = 6.0
    panel_height = 0.5833333333333334
    panel_thickness = 0.0833
    panel_offset_x = 12.333333333333332

    # Define the panel profile in the XZ-plane to make it vertical
    p1 = XYZ(panel_offset_x, 0, 0)
    p2 = XYZ(panel_offset_x + panel_width, 0, 0)
    p3 = XYZ(panel_offset_x + panel_width, 0, panel_height)
    p4 = XYZ(panel_offset_x, 0, panel_height)
    
    panel_lines = [Line.CreateBound(p1, p2), Line.CreateBound(p2, p3), Line.CreateBound(p3, p4), Line.CreateBound(p4, p1)]
    outer_loop = CurveLoop.Create(panel_lines)
    
    # Extrude along the Y-axis to create a vertical panel
    panel_solid = GeometryCreationUtilities.CreateExtrusionGeometry([outer_loop], XYZ.BasisY, panel_thickness)
    final_solid = panel_solid

    if True:
        bottom_hole_dist = 1.4166666666666667
        hole_dist_from_floor = 0.0833
        hole_radius = 0.0208

        # Hole centers are on the XZ plane (Y=0), with Z value determining height from floor
        hole_centers = [
            XYZ(panel_offset_x + bottom_hole_dist, 0, hole_dist_from_floor),
            XYZ(panel_offset_x + panel_width - bottom_hole_dist, 0, hole_dist_from_floor)
        ]
        
        for center in hole_centers:
            # The plane for the holes is perpendicular to the Y-axis
            plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, center)
            arc1 = Arc.Create(plane, hole_radius, 0, math.pi)
            arc2 = Arc.Create(plane, hole_radius, math.pi, 2 * math.pi)
            hole_loop = CurveLoop.Create([arc1, arc2])
            # Extrude the hole cylinder along the Y-axis
            cylinder_solid = GeometryCreationUtilities.CreateExtrusionGeometry([hole_loop], XYZ.BasisY, panel_thickness + 0.1)
            
            if final_solid and cylinder_solid:
                final_solid = BooleanOperationsUtils.ExecuteBooleanOperation(final_solid, cylinder_solid, BooleanOperationsType.Difference)

    shape_element = DirectShape.CreateElement(doc, ElementId(BuiltInCategory.OST_GenericModel))
    shape_element.SetShape([final_solid])
    shape_element.Name = 'Panel 3 - Sample Pilaster Type'
    print('Successfully created Panel 3 - Sample Pilaster Type.')

    # --- Panel 4: Sample Side Panel Type ---
    panel_width = 4.333333333333333
    panel_height = 4.166666666666667
    panel_thickness = 0.0833
    panel_offset_x = 19.333333333333332

    # Define the panel profile in the XZ-plane to make it vertical
    p1 = XYZ(panel_offset_x, 0, 0)
    p2 = XYZ(panel_offset_x + panel_width, 0, 0)
    p3 = XYZ(panel_offset_x + panel_width, 0, panel_height)
    p4 = XYZ(panel_offset_x, 0, panel_height)
    
    panel_lines = [Line.CreateBound(p1, p2), Line.CreateBound(p2, p3), Line.CreateBound(p3, p4), Line.CreateBound(p4, p1)]
    outer_loop = CurveLoop.Create(panel_lines)
    
    # Extrude along the Y-axis to create a vertical panel
    panel_solid = GeometryCreationUtilities.CreateExtrusionGeometry([outer_loop], XYZ.BasisY, panel_thickness)
    final_solid = panel_solid

    if False:
        bottom_hole_dist = 0.0
        hole_dist_from_floor = 0.0833
        hole_radius = 0.0208

        # Hole centers are on the XZ plane (Y=0), with Z value determining height from floor
        hole_centers = [
            XYZ(panel_offset_x + bottom_hole_dist, 0, hole_dist_from_floor),
            XYZ(panel_offset_x + panel_width - bottom_hole_dist, 0, hole_dist_from_floor)
        ]
        
        for center in hole_centers:
            # The plane for the holes is perpendicular to the Y-axis
            plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, center)
            arc1 = Arc.Create(plane, hole_radius, 0, math.pi)
            arc2 = Arc.Create(plane, hole_radius, math.pi, 2 * math.pi)
            hole_loop = CurveLoop.Create([arc1, arc2])
            # Extrude the hole cylinder along the Y-axis
            cylinder_solid = GeometryCreationUtilities.CreateExtrusionGeometry([hole_loop], XYZ.BasisY, panel_thickness + 0.1)
            
            if final_solid and cylinder_solid:
                final_solid = BooleanOperationsUtils.ExecuteBooleanOperation(final_solid, cylinder_solid, BooleanOperationsType.Difference)

    shape_element = DirectShape.CreateElement(doc, ElementId(BuiltInCategory.OST_GenericModel))
    shape_element.SetShape([final_solid])
    shape_element.Name = 'Panel 4 - Sample Side Panel Type'
    print('Successfully created Panel 4 - Sample Side Panel Type.')

    # --- Panel 5: Sample Side Panel Type ---
    panel_width = 4.333333333333333
    panel_height = 4.166666666666667
    panel_thickness = 0.0833
    panel_offset_x = 24.666666666666664

    # Define the panel profile in the XZ-plane to make it vertical
    p1 = XYZ(panel_offset_x, 0, 0)
    p2 = XYZ(panel_offset_x + panel_width, 0, 0)
    p3 = XYZ(panel_offset_x + panel_width, 0, panel_height)
    p4 = XYZ(panel_offset_x, 0, panel_height)
    
    panel_lines = [Line.CreateBound(p1, p2), Line.CreateBound(p2, p3), Line.CreateBound(p3, p4), Line.CreateBound(p4, p1)]
    outer_loop = CurveLoop.Create(panel_lines)
    
    # Extrude along the Y-axis to create a vertical panel
    panel_solid = GeometryCreationUtilities.CreateExtrusionGeometry([outer_loop], XYZ.BasisY, panel_thickness)
    final_solid = panel_solid

    if False:
        bottom_hole_dist = 0.0
        hole_dist_from_floor = 0.0833
        hole_radius = 0.0208

        # Hole centers are on the XZ plane (Y=0), with Z value determining height from floor
        hole_centers = [
            XYZ(panel_offset_x + bottom_hole_dist, 0, hole_dist_from_floor),
            XYZ(panel_offset_x + panel_width - bottom_hole_dist, 0, hole_dist_from_floor)
        ]
        
        for center in hole_centers:
            # The plane for the holes is perpendicular to the Y-axis
            plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, center)
            arc1 = Arc.Create(plane, hole_radius, 0, math.pi)
            arc2 = Arc.Create(plane, hole_radius, math.pi, 2 * math.pi)
            hole_loop = CurveLoop.Create([arc1, arc2])
            # Extrude the hole cylinder along the Y-axis
            cylinder_solid = GeometryCreationUtilities.CreateExtrusionGeometry([hole_loop], XYZ.BasisY, panel_thickness + 0.1)
            
            if final_solid and cylinder_solid:
                final_solid = BooleanOperationsUtils.ExecuteBooleanOperation(final_solid, cylinder_solid, BooleanOperationsType.Difference)

    shape_element = DirectShape.CreateElement(doc, ElementId(BuiltInCategory.OST_GenericModel))
    shape_element.SetShape([final_solid])
    shape_element.Name = 'Panel 5 - Sample Side Panel Type'
    print('Successfully created Panel 5 - Sample Side Panel Type.')
except Exception as e:
    print("An error occurred during panel creation: {{0}}".format(e))
    t.RollBack()
else:
    t.Commit()
    print("Successfully created all panels.")
