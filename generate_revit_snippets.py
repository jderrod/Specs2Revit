# Python Script to Generate a Single Revit Snippet for All Panels
# Generated by Cascade AI

import pandas as pd
import os
import math

# --- CONFIGURATION ---
INPUT_FILE = 'Exported Schedule - Simple Toilet Partition Stall.xlsx'
OUTPUT_DIR = 'output'
OUTPUT_FILENAME = os.path.join(OUTPUT_DIR, 'all_panels_snippet.txt')

PANEL_THICKNESS = 0.0833  # 1 inch in feet
HOLE_RADIUS = 0.0208    # 0.25 inches in feet
SIDE_HOLE_DISTANCE = 0.0833 # 1 inch in feet
HOLE_DIST_FROM_SIDE = 3.0 / 12.0 # 3 inches in feet
PANEL_SPACING_GAP = 1.0   # 1 foot gap between panels
FLOOR_CLEARANCE = 6.0 / 12.0  # 6 inches in feet

# --- TEMPLATES ---

FILE_HEADER_TEMPLATE = """\
# Revit Python Shell Snippet to Create All Bathroom Stall Panels
# Generated by Cascade AI
# Copy and paste the entire content of this file into the Revit Python Shell.

import clr
clr.AddReference('RevitAPI')
from Autodesk.Revit.DB import *
from Autodesk.Revit.DB import ElementTransformUtils
import math

doc = __revit__.ActiveUIDocument.Document

# Start a single transaction for all panels
t = Transaction(doc, 'Create Bathroom Stall Panels')
t.Start()

try:
    # --- Create Reference Floor and Wall ---
    # Create a reference floor plane (20ft x 20ft, 6in thick)
    floor_profile = [
        Line.CreateBound(XYZ(0, 0, 0), XYZ(20, 0, 0)),
        Line.CreateBound(XYZ(20, 0, 0), XYZ(20, 20, 0)),
        Line.CreateBound(XYZ(20, 20, 0), XYZ(0, 20, 0)),
        Line.CreateBound(XYZ(0, 20, 0), XYZ(0, 0, 0))
    ]
    floor_loop = CurveLoop.Create(floor_profile)
    # Extrude in the negative Z direction with a positive distance
    floor_solid = GeometryCreationUtilities.CreateExtrusionGeometry([floor_loop], XYZ.BasisZ.Negate(), 0.5)
    floor_shape = DirectShape.CreateElement(doc, ElementId(BuiltInCategory.OST_Floors))
    floor_shape.SetShape([floor_solid])
    floor_shape.Name = 'Reference Floor'

    # Create a reference back wall (20ft long, 8ft high, 6in thick)
    wall_profile = [
        Line.CreateBound(XYZ(0, 0, 0), XYZ(20, 0, 0)),
        Line.CreateBound(XYZ(20, 0, 0), XYZ(20, 0, 8)),
        Line.CreateBound(XYZ(20, 0, 8), XYZ(0, 0, 8)),
        Line.CreateBound(XYZ(0, 0, 8), XYZ(0, 0, 0))
    ]
    wall_loop = CurveLoop.Create(wall_profile)
    wall_solid = GeometryCreationUtilities.CreateExtrusionGeometry([wall_loop], XYZ.BasisY, 0.5)
    wall_shape = DirectShape.CreateElement(doc, ElementId(BuiltInCategory.OST_Walls))
    wall_shape.SetShape([wall_solid])
    wall_shape.Name = 'Reference Wall'
    print('Created reference floor and wall.')

"""

SIDE_WALL_PANEL_TEMPLATE = """
    # --- Side Wall Panel {panel_index}: {panel_type} ---
    stall_depth = {stall_depth}
    panel_height = {panel_height}
    panel_thickness = {panel_thickness}
    panel_offset_x = {panel_offset_x} # This is 0 or stall_front_width

    # Define profile in YZ plane, offset from the back wall by the wall's thickness (0.5 ft)
    p1 = XYZ(panel_offset_x, 0.5, 0)
    p2 = XYZ(panel_offset_x, stall_depth + 0.5, 0)
    p3 = XYZ(panel_offset_x, stall_depth + 0.5, panel_height)
    p4 = XYZ(panel_offset_x, 0.5, panel_height)
    
    panel_lines = [Line.CreateBound(p1, p2), Line.CreateBound(p2, p3), Line.CreateBound(p3, p4), Line.CreateBound(p4, p1)]
    outer_loop = CurveLoop.Create(panel_lines)
    
    # Extrude along the X-axis. First wall extrudes right, second wall extrudes left.
    extrusion_dir = XYZ.BasisX if {is_first_wall} else XYZ.BasisX.Negate()
    panel_solid = GeometryCreationUtilities.CreateExtrusionGeometry([outer_loop], extrusion_dir, panel_thickness)
    
    shape_element = DirectShape.CreateElement(doc, ElementId(BuiltInCategory.OST_GenericModel))
    shape_element.SetShape([panel_solid])
    shape_element.Name = 'Panel {panel_index} - {panel_type}'
    print('Successfully created Side Wall Panel {panel_index}.')
"""

FRONT_PANEL_TEMPLATE = """
    # --- Front Panel {panel_index}: {panel_type} ---
    panel_width = {panel_width}
    panel_height = {panel_height}
    panel_thickness = {panel_thickness}
    panel_offset_x = {panel_offset_x}
    stall_depth = {stall_depth}
    floor_clearance = {floor_clearance}

    # 1. Define panel profile flat on the floor (XY plane at Z=0)
    p1 = XYZ(panel_offset_x, stall_depth, 0)
    p2 = XYZ(panel_offset_x + panel_width, stall_depth, 0)
    p3 = XYZ(panel_offset_x + panel_width, stall_depth + panel_height, 0)
    p4 = XYZ(panel_offset_x, stall_depth + panel_height, 0)
    
    panel_lines = [Line.CreateBound(p1, p2), Line.CreateBound(p2, p3), Line.CreateBound(p3, p4), Line.CreateBound(p4, p1)]
    outer_loop = CurveLoop.Create(panel_lines)
    
    # 2. Create base solid by extruding up along Z-axis
    panel_solid = GeometryCreationUtilities.CreateExtrusionGeometry([outer_loop], XYZ.BasisZ, panel_thickness)
    final_solid = panel_solid

    # 3. Create holes if needed
    if {has_holes}:
        bottom_hole_dist = {bottom_hole_dist}
        hole_dist_from_side = {hole_dist_from_side}
        hole_radius = {hole_radius}

        hole_centers = [
            XYZ(panel_offset_x + hole_dist_from_side, stall_depth + bottom_hole_dist, 0),
            XYZ(panel_offset_x + panel_width - hole_dist_from_side, stall_depth + bottom_hole_dist, 0)
        ]
        
        for center in hole_centers:
            plane = Plane.CreateByNormalAndOrigin(XYZ.BasisZ, center)
            arc1 = Arc.Create(plane, hole_radius, 0, math.pi)
            arc2 = Arc.Create(plane, hole_radius, math.pi, 2 * math.pi)
            hole_loop = CurveLoop.Create([arc1, arc2])
            cylinder_solid = GeometryCreationUtilities.CreateExtrusionGeometry([hole_loop], XYZ.BasisZ, panel_thickness + 0.1)
            
            if final_solid and cylinder_solid:
                final_solid = BooleanOperationsUtils.ExecuteBooleanOperation(final_solid, cylinder_solid, BooleanOperationsType.Difference)

    # 4. Create the DirectShape element
    shape_element = DirectShape.CreateElement(doc, ElementId(BuiltInCategory.OST_GenericModel))
    shape_element.SetShape([final_solid])
    shape_element.Name = 'Panel {panel_index} - {panel_type}'
    print('Created flat panel {panel_index}.')

    # 5. Rotate the panel 90 degrees up around its front edge
    rotation_axis = Line.CreateBound(p1, p2)
    ElementTransformUtils.RotateElement(doc, shape_element.Id, rotation_axis, math.pi / 2)
    print('Rotated front panel {panel_index} up.')

    # 6. Move the panel to its final height
    translation = XYZ(0, 0, floor_clearance)
    ElementTransformUtils.MoveElement(doc, shape_element.Id, translation)
    print('Moved front panel {panel_index} to final height.')
"""

FILE_FOOTER_TEMPLATE = """\
except Exception as e:
    print(f"An error occurred during panel creation: {e}")
    t.RollBack()
else:
    t.Commit()
    print("Successfully created all panels.")
"""

# --- HELPER FUNCTIONS ---
def clean_and_convert_to_feet(value):
    if isinstance(value, float) and math.isnan(value):
        return 0.0
    if isinstance(value, str):
        try:
            numeric_value = float(value.replace('"', '').strip())
            return numeric_value / 12.0
        except (ValueError, AttributeError):
            return 0.0
    elif isinstance(value, (int, float)):
        return float(value) / 12.0
    return 0.0

# --- MAIN SCRIPT ---
def main():
    if not os.path.exists(OUTPUT_DIR):
        os.makedirs(OUTPUT_DIR)

    try:
        df = pd.read_excel(INPUT_FILE, engine='openpyxl', header=1)
    except FileNotFoundError:
        print(f"Error: Input file not found at '{INPUT_FILE}'")
        return

    df.dropna(subset=['Panel Height'], inplace=True)

    # --- First Pass: Calculate stall dimensions ---
    stall_depth = 0
    stall_front_width = 0
    front_panel_widths = []

    for index, row in df.iterrows():
        panel_type = str(row['Type']).lower()
        w = clean_and_convert_to_feet(row['Panel Width'])
        h = clean_and_convert_to_feet(row['Panel Height'])
        panel_width, _ = (h, w) if h > w else (w, h)

        if 'side panel' in panel_type:
            if panel_width > stall_depth:
                stall_depth = panel_width  # Stall depth is the width of the side walls
        else:
            front_panel_widths.append(panel_width)

    if stall_depth == 0:
        stall_depth = 5  # Default stall depth if no wall panels are found
        print("Warning: Could not determine stall depth from 'Wall Panel' types. Using default depth.")

    stall_front_width = sum(front_panel_widths) + PANEL_SPACING_GAP * (len(front_panel_widths) - 1)

    # --- Second Pass: Generate code for each panel ---
    final_script_content = FILE_HEADER_TEMPLATE
    current_front_offset_x = 0
    panel_counter = 1
    side_wall_count = 0

    for index, row in df.iterrows():
        panel_type_raw = str(row['Type'])
        panel_type_lower = panel_type_raw.lower()
        panel_width = clean_and_convert_to_feet(row['Panel Width'])
        panel_height = clean_and_convert_to_feet(row['Panel Height'])

        bottom_hole = clean_and_convert_to_feet(row['Bottom Hole Distance'])
        has_holes = bottom_hole > 0
        panel_type_escaped = panel_type_raw.replace("'", "\\'")

        if 'side panel' in panel_type_lower:
            is_first = (side_wall_count == 0)
            offset_x = 0 if is_first else stall_front_width
            panel_code = SIDE_WALL_PANEL_TEMPLATE.format(
                panel_index=panel_counter,
                stall_depth=stall_depth,
                panel_height=panel_height,
                panel_thickness=PANEL_THICKNESS,
                panel_offset_x=offset_x,
                is_first_wall=is_first,
                panel_type=panel_type_escaped
            )
            side_wall_count += 1
        else:
            panel_code = FRONT_PANEL_TEMPLATE.format(
                panel_index=panel_counter,
                panel_width=panel_width,
                panel_height=panel_height,
                panel_thickness=PANEL_THICKNESS,
                panel_offset_x=current_front_offset_x,
                stall_depth=stall_depth + 0.5, # Add wall thickness for correct front position
                floor_clearance=FLOOR_CLEARANCE,
                has_holes=has_holes,
                bottom_hole_dist=bottom_hole,
                side_hole_dist=SIDE_HOLE_DISTANCE, # This is legacy, but might be used by hole logic
                hole_dist_from_side=HOLE_DIST_FROM_SIDE,
                hole_radius=HOLE_RADIUS,
                panel_type=panel_type_escaped
            )
            current_front_offset_x += panel_width + PANEL_SPACING_GAP

        final_script_content += panel_code
        panel_counter += 1

    final_script_content += FILE_FOOTER_TEMPLATE

    with open(OUTPUT_FILENAME, 'w') as f:
        f.write(final_script_content)

    print(f"Generated consolidated snippet: {OUTPUT_FILENAME}")

if __name__ == '__main__':
    main()
