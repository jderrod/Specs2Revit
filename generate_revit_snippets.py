# Python Script to Generate a Single Revit Snippet for All Panels
# Generated by Cascade AI

import pandas as pd
import os
import math

# --- CONFIGURATION ---
INPUT_FILE = 'Exported Schedule - Simple Toilet Partition Stall.xlsx'
OUTPUT_DIR = 'output'
OUTPUT_FILENAME = os.path.join(OUTPUT_DIR, 'all_panels_snippet.txt')

PANEL_THICKNESS = 0.0833  # 1 inch in feet
HOLE_RADIUS = 0.0208    # 0.25 inches in feet
SIDE_HOLE_DISTANCE = 0.0833 # 1 inch in feet
PANEL_SPACING_GAP = 1.0   # 1 foot gap between panels

# --- TEMPLATES ---

FILE_HEADER_TEMPLATE = """
# Revit Python Shell Snippet to Create All Bathroom Stall Panels
# Generated by Cascade AI
# Copy and paste the entire content of this file into the Revit Python Shell.

import clr
clr.AddReference('RevitAPI')
from Autodesk.Revit.DB import *
import math

doc = __revit__.ActiveUIDocument.Document

# Start a single transaction for all panels
t = Transaction(doc, 'Create Bathroom Stall Panels')
t.Start()

try:
"""

PANEL_TEMPLATE = """
    # --- Panel {panel_index}: {panel_type} ---
    panel_width = {panel_width}
    panel_height = {panel_height}
    panel_thickness = {panel_thickness}
    panel_offset_x = {panel_offset_x}

    # Define the panel profile in the XZ-plane to make it vertical
    p1 = XYZ(panel_offset_x, 0, 0)
    p2 = XYZ(panel_offset_x + panel_width, 0, 0)
    p3 = XYZ(panel_offset_x + panel_width, 0, panel_height)
    p4 = XYZ(panel_offset_x, 0, panel_height)
    
    panel_lines = [Line.CreateBound(p1, p2), Line.CreateBound(p2, p3), Line.CreateBound(p3, p4), Line.CreateBound(p4, p1)]
    outer_loop = CurveLoop.Create(panel_lines)
    
    # Extrude along the Y-axis to create a vertical panel
    panel_solid = GeometryCreationUtilities.CreateExtrusionGeometry([outer_loop], XYZ.BasisY, panel_thickness)
    final_solid = panel_solid

    if {has_holes}:
        bottom_hole_dist = {bottom_hole_dist}
        hole_dist_from_floor = {side_hole_dist}
        hole_radius = {hole_radius}

        # Hole centers are on the XZ plane (Y=0), with Z value determining height from floor
        hole_centers = [
            XYZ(panel_offset_x + bottom_hole_dist, 0, hole_dist_from_floor),
            XYZ(panel_offset_x + panel_width - bottom_hole_dist, 0, hole_dist_from_floor)
        ]
        
        for center in hole_centers:
            # The plane for the holes is perpendicular to the Y-axis
            plane = Plane.CreateByNormalAndOrigin(XYZ.BasisY, center)
            arc1 = Arc.Create(plane, hole_radius, 0, math.pi)
            arc2 = Arc.Create(plane, hole_radius, math.pi, 2 * math.pi)
            hole_loop = CurveLoop.Create([arc1, arc2])
            # Extrude the hole cylinder along the Y-axis
            cylinder_solid = GeometryCreationUtilities.CreateExtrusionGeometry([hole_loop], XYZ.BasisY, panel_thickness + 0.1)
            
            if final_solid and cylinder_solid:
                final_solid = BooleanOperationsUtils.ExecuteBooleanOperation(final_solid, cylinder_solid, BooleanOperationsType.Difference)

    shape_element = DirectShape.CreateElement(doc, ElementId(BuiltInCategory.OST_GenericModel))
    shape_element.SetShape([final_solid])
    shape_element.Name = 'Panel {panel_index} - {panel_type}'
    print('Successfully created Panel {panel_index} - {panel_type}.')

    # Rotate the panel 90 degrees around the Y-axis
    axis_p1 = XYZ(panel_offset_x, 0, 0)
    axis_p2 = XYZ(panel_offset_x, 1, 0)
    rotation_axis = Line.CreateBound(axis_p1, axis_p2)
    ElementTransformUtils.RotateElement(doc, shape_element.Id, rotation_axis, math.pi / 2)
    print('Rotated panel {panel_index} around Y-axis.')
"""

FILE_FOOTER_TEMPLATE = """\
except Exception as e:
    print("An error occurred during panel creation: {{0}}".format(e))
    t.RollBack()
else:
    t.Commit()
    print("Successfully created all panels.")
"""

# --- HELPER FUNCTIONS ---
def clean_and_convert_to_feet(value):
    if isinstance(value, float) and math.isnan(value):
        return 0.0
    if isinstance(value, str):
        try:
            numeric_value = float(value.replace('"', '').strip())
            return numeric_value / 12.0
        except (ValueError, AttributeError):
            return 0.0
    elif isinstance(value, (int, float)):
        return float(value) / 12.0
    return 0.0

# --- MAIN SCRIPT ---
def main():
    if not os.path.exists(OUTPUT_DIR):
        os.makedirs(OUTPUT_DIR)
        
    try:
        df = pd.read_excel(INPUT_FILE, engine='openpyxl', header=1)
    except FileNotFoundError:
        print(f"Error: Input file not found at '{INPUT_FILE}'")
        return

    df.dropna(subset=['Panel Height'], inplace=True)
    
    final_script_content = FILE_HEADER_TEMPLATE
    
    current_offset_x = 0
    panel_counter = 1
    
    for index, row in df.iterrows():
        w = clean_and_convert_to_feet(row['Panel Width'])
        h = clean_and_convert_to_feet(row['Panel Height'])

        if h > w:
            panel_width, panel_height = h, w
        else:
            panel_width, panel_height = w, h
            
        bottom_hole = clean_and_convert_to_feet(row['Bottom Hole Distance'])
        has_holes = bottom_hole > 0
        # Escape single quotes in the panel type to prevent syntax errors
        panel_type = str(row['Type']).replace("'", "\\'")

        panel_code = PANEL_TEMPLATE.format(
            panel_index=panel_counter,
            panel_width=panel_width,
            panel_height=panel_height,
            panel_thickness=PANEL_THICKNESS,
            panel_offset_x=current_offset_x,
            has_holes=has_holes,
            bottom_hole_dist=bottom_hole,
            side_hole_dist=SIDE_HOLE_DISTANCE,
            hole_radius=HOLE_RADIUS,
            panel_type=panel_type
        )
        
        final_script_content += panel_code
        
        current_offset_x += panel_width + PANEL_SPACING_GAP
        panel_counter += 1
        
    final_script_content += FILE_FOOTER_TEMPLATE
    
    with open(OUTPUT_FILENAME, 'w') as f:
        f.write(final_script_content)
        
    print(f"Generated consolidated snippet: {OUTPUT_FILENAME}")

if __name__ == '__main__':
    main()
